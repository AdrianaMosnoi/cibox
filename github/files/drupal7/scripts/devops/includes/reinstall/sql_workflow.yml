---
- name: Droping drupal database
  mysql_db: name={{ mysql_db }} state=absent login_user={{ mysql_user }} login_password={{ mysql_pass }}
  when: pp_environment == "demo" or pp_environment == "default"

- name: Creating drupal database
  mysql_db: name={{ mysql_db }} state=present login_user={{ mysql_user }} login_password={{ mysql_pass }}

# Vagrant build.
- name: Downloading latest backup to local environment
  get_url: url={{ source_database }} dest={{ backup_folder }}/latest_remote.sql.gz force=yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

- name: Importing from remote backup
  mysql_db: name={{ mysql_db }} state=import target={{ backup_folder }}/latest_remote.sql.gz login_user={{ mysql_user }} login_password={{ mysql_pass }}
  sudo: yes
  when: pp_environment == "default" and ((ansible_env.USER is not defined or ansible_env.USER != "{{ ci_server_username }}") and (ansible_env.SUDO_USER is not defined or ansible_env.SUDO_USER != "{{ ci_server_username }}"))

# CI server build.
- name: Copy latest backup to build folder
  sudo: yes
  copy: src={{ backup_folder }}/{{ source_backup_name }} dest=./latest.sql.gz force=yes mode=0644
  when: (pp_environment == "default" or pp_environment == "demo") and ((ansible_env.USER is defined and ansible_env.USER == "{{ ci_server_username }}") or (ansible_env.SUDO_USER is defined and ansible_env.SUDO_USER == "{{ ci_server_username }}"))

- name: Importing from local backup
  mysql_db: name={{ mysql_db }} state=import target=./latest.sql.gz login_user={{ mysql_user }} login_password={{ mysql_pass }}
  sudo: yes
  when: (pp_environment == "default" or pp_environment == "demo") and ((ansible_env.USER is defined and ansible_env.USER == "{{ ci_server_username }}") or (ansible_env.SUDO_USER is defined and ansible_env.SUDO_USER == "{{ ci_server_username }}"))

- name: Remove local backup from build folder
  sudo: yes
  file: name=./latest.sql.gz state=absent
  when: pp_environment == "default" or pp_environment == "demo"

# Update database.
- name: Updating database
  sudo: yes
  shell: "{{ php_env_vars }} drush -dvy updb -l {{ site_url }}"